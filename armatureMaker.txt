import bpy
import csv

ARMATURE_FILE = 'D:\\praca_wlasna\\mocapSolutions\\anim\\points\\armatureData.csv'
POSE_FILE = 'D:\\praca_wlasna\\mocapSolutions\\anim\\points\\poseData.csv'
ARMATURE_FILE_T = 'D:\\praca_wlasna\\mocapSolutions\\anim\\points\\armatureData_T.csv'
POSE_FILE_T = 'D:\\praca_wlasna\\mocapSolutions\\anim\\points\\poseData_T.csv'

START_FRAME = 1
END_FRAME = 60
		
class MocapFigure:
    def __init__(self, armatureFile, poseFile="", armatureFile_T="", poseFile_T=""):
        ## armatureFile - file with Armature locations (number of bones, coordinates) and keyframes data
        ## poseFile - file to which Pose locations are saved
        ## armatureFile_T - file with Armature locations (number of bones, coordinates) and keyframes data [to save to in test mode]
        ## poseFile_T - file to which Pose locations are saved [to save to in test mode]
        self.armatureFile = armatureFile
        self.poseFile = poseFile
        self.armatureFile_T = armatureFile_T
        self.poseFile_T = poseFile_T
    def createArmature(self):
        ## create armature from the first row of csvFile_input
        # Check if armature exists, if not delete
        objects = bpy.data.objects
        for object in objects:
            if object.name == 'Armature':
                bpy.ops.object.mode_set(mode='OBJECT')
                # Delete armature if it exists
                amt = bpy.data.objects['Armature']
                amt.select_set(True) 
                bpy.ops.object.delete(use_global=False)
        # Change mode to object
        if bpy.context.mode != 'OBJECT':
            bpy.ops.object.mode_set(mode='OBJECT')
        # Open file, create armature
        with open(self.armatureFile, "r", newline='') as input:
            # Place root bone
            bpy.ops.object.armature_add(enter_editmode=True, align='WORLD', 
            location=(0, 0, 0), scale=(1, 1, 1))
            amt = bpy.data.objects['Armature']
            # Add location to root and add the rest of bones
            csv_file = csv.reader(input, delimiter = ',')
            for row in csv_file:
                bone_new = amt.data.edit_bones.new(row[0])
                bone_new.head[0] = float(row[1])
                bone_new.head[1] = float(row[2])
                bone_new.head[2] = float(row[3])

                bone_new.tail[0] = float(row[4])
                bone_new.tail[1] = float(row[5])
                bone_new.tail[2] = float(row[6])
        ## connect bones with parent
        # Select armature
        amt = bpy.data.objects['Armature']
        # Set parents
        for index in range(len(amt.data.edit_bones) - 1):
            # Connect 
            if (index == 0):
                amt.data.edit_bones[index + 1].parent = amt.data.edit_bones[index]
            else:
                amt.data.edit_bones[index + 1].parent = amt.data.edit_bones[index]
                amt.data.edit_bones[index + 1].use_connect = True
    def addPoses(self):
        ## move Armature to Poses from keyframes
        # Change to pose mode, read and add keyframes
        bpy.ops.object.posemode_toggle()
        amt = bpy.data.objects['Armature']
        with open(self.poseFile, "r", newline='') as input:
            csv_file = csv.reader(input, delimiter = ',')
            ## All frames
            frame_count = 1
            for row in csv_file:
                row_index = 0
                while (row_index < 43):
                    bone_index = 0
                    for bone_index in range(1, len(amt.pose.bones)):
                        bone = amt.pose.bones[bone_index]
                        # Main bone
                        if (bone_index == 1):
                            bone.location = (float(row[row_index]),float(row[row_index+1]),float(row[row_index+2]))
                            bone.rotation_quaternion = (float(row[row_index+3]), float(row[row_index+4]), float(row[row_index+5]), float(row[row_index+6]))
                            bone.keyframe_insert(data_path="location", frame=frame_count)
                            bone.keyframe_insert(data_path="rotation_quaternion", frame=frame_count)
                            row_index += 7
                        # The rest
                        else:
                            bone.rotation_quaternion = (float(row[row_index]), float(row[row_index+1]), float(row[row_index+2]), float(row[row_index+3]))
                            bone.keyframe_insert(data_path="rotation_quaternion", frame=frame_count)
                            row_index += 4
                frame_count += 1
    def saveArmature(self):
		## save Armature of bones to csv file
        armature = bpy.data.objects['Armature']
		# Choose Pose_mode
        bpy.ops.object.mode_set(mode='EDIT', toggle=False)
        # Write to file
        with open(self.armatureFile_T, "w", newline='')as file:
            csv_file = csv.writer(file)
			# Choose Bone
            for index in range(1, len(armature.data.edit_bones)):
                bone = armature.data.edit_bones[index]
				# try head_local with moving armature
                x_h, y_h, z_h = bone.head
                x_t, y_t, z_t = bone.tail
                csv_file.writerow([bone.name, x_h, y_h, z_h, x_t, y_t, z_t])
    def savePoses(self, firstFrame_number, lastFrame_number):
        #int, int
        ##save Poses of bones to csv file
        armature_name = 'Armature'
        armature = bpy.data.objects[armature_name]
        #Choose Pose_mode
        bpy.ops.object.mode_set(mode='POSE', toggle=False)
        scene = bpy.context.scene
        with open(self.poseFile_T, 'w', newline='') as file:
            csv_writer = csv.writer(file)
            for frame_counter in range(firstFrame_number, lastFrame_number + 1):
                row = []
                scene.frame_set(frame_counter)
                for index in range(1, len(armature.pose.bones)):
                    ##One frame
                    bone = armature.pose.bones[index]
                    #Main bone
                    if (index == 1):
                        row.append(round(bone.location[0],3))
                        row.append(round(bone.location[1],3))
                        row.append(round(bone.location[2],3))
                    #The rest
                    row.append(round(bone.rotation_quaternion[0],3))
                    row.append(round(bone.rotation_quaternion[1],3))
                    row.append(round(bone.rotation_quaternion[2],3))
                    row.append(round(bone.rotation_quaternion[3],3))
                csv_writer.writerow(row)
                
    def normalMode(self):
        #Normal workflow: create Armature from Armature_file, read Poses from Pose_file
        self.createArmature()
        self.addPoses()
if __name__ == "__main__":
#armatureFile = ARMATURE_FILE_T
#poseFile_T = POSE_FILE_T
    maker = ArmatureMaker(ARMATURE_FILE, POSE_FILE, ARMATURE_FILE_T, POSE_FILE_T)
    maker.normalMode()
    #maker.saveArmature()
    #maker.savePoses(START_FRAME, END_FRAME)